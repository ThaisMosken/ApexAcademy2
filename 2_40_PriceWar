trigger LeadingCompetitorUpdate on Lead (before insert, before update) {

    for (Lead myLead : Trigger.new) {

        List<Integer> competitorPrices = new List<Integer>();
        List<Integer> competitorPricesReordered = new List<Integer>();
        List<String> competitorNames = new List<String>();
        Integer lowestPrice;

        if (myLead.Competitor_1__c != null && myLead.Competitor_1_Price__c != null) {
            competitorPrices.add(myLead.Competitor_1_Price__c.intValue());
            competitorNames.add(myLead.Competitor_1__c);
        } if (myLead.Competitor_2__c != null && myLead.Competitor_2_Price__c != null) {
            competitorPrices.add(myLead.Competitor_2_Price__c.intValue());
            competitorNames.add(myLead.Competitor_2__c);
        } if (myLead.Competitor_3__c != null && myLead.Competitor_3_Price__c != null) {
            competitorPrices.add(myLead.Competitor_3_Price__c.intValue());
            competitorNames.add(myLead.Competitor_3__c);
        } else {
            return;
        }

        competitorPricesReordered = competitorPrices.clone();
        competitorPricesReordered.sort();

        lowestPrice = competitorPricesReordered.get(0);

        Integer position = 0;
        
        for (Integer orderedPrice : competitorPrices) {
        
            if (orderedPrice == lowestPrice) {
                myLead.Leading_Competitor__c = competitorNames.get(position);
                return;
            } else {
                position++;
            }
        }
    }
}